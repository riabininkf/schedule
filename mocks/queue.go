// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	schedule "github.com/riabininkf/schedule"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Add provides a mock function with given fields: execAt, fn
func (_m *Queue) Add(execAt time.Time, fn func(context.Context)) error {
	ret := _m.Called(execAt, fn)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, func(context.Context)) error); ok {
		r0 = rf(execAt, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopBatch provides a mock function with given fields: execAt
func (_m *Queue) PopBatch(execAt time.Time) []func(context.Context) {
	ret := _m.Called(execAt)

	if len(ret) == 0 {
		panic("no return value specified for PopBatch")
	}

	var r0 []func(context.Context)
	if rf, ok := ret.Get(0).(func(time.Time) []func(context.Context)); ok {
		r0 = rf(execAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]func(context.Context))
		}
	}

	return r0
}

// Stats provides a mock function with no fields
func (_m *Queue) Stats() schedule.QueueStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 schedule.QueueStats
	if rf, ok := ret.Get(0).(func() schedule.QueueStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.QueueStats)
		}
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
