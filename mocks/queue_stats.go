// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueueStats is an autogenerated mock type for the QueueStats type
type QueueStats struct {
	mock.Mock
}

// CapacityBytes provides a mock function with no fields
func (_m *QueueStats) CapacityBytes() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CapacityBytes")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EstimatedTaskSize provides a mock function with no fields
func (_m *QueueStats) EstimatedTaskSize() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EstimatedTaskSize")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Tasks provides a mock function with no fields
func (_m *QueueStats) Tasks() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tasks")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// UsedBytes provides a mock function with no fields
func (_m *QueueStats) UsedBytes() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UsedBytes")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// UsedMiB provides a mock function with no fields
func (_m *QueueStats) UsedMiB() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UsedMiB")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// NewQueueStats creates a new instance of QueueStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueStats(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueStats {
	mock := &QueueStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
